Next (in order of descending priority):
-use PHP to apply the chosen style to the game
-consider removing the settings webpage
-make at least four different styles
 --perhaps include styles that allow browsers that don't allow the
  gradients to be used (mention on readme)
 --look into bootstrap
-consider using Angular to generate radio button for each stylesheet
 in main menu
-remove unneeded buttons
-applying stepwise refinement in more areas
 (perhaps a function for changing the webpage that takes the context)
 --consider the phases of the webpage
  ---consider using objects to manage these phases
 --organize functions handling user interaction (e.g. remove the
 enableResponsesToKeyPresses function)
-make everything look nice
 --option to choose which (css) style for game
-play a sound when a player is asked to check in
-background music (e.g. "Barrel Blast"); choice

After the above:
-release 1.0
-basic (perhaps, stupid) AI
-release 2.0
-Node.js
-YouTube video

Considerable:
-precondition checks for functions with boolean argument (since an
 undefined argument is neither true nor false)
-figure out how to not allow a commit if unit tests failed
-checking for providing of arguments to functions that require it
 (contract may be sufficient); notify in console
-consider support for both use of keys and use of clicking
-consider whether or not its practical to enforce preconditions in unit
 tests (as opposed to solely with exceptions)
-look into generating tests automatically
-CSS variables